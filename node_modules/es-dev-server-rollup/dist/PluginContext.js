"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createPluginContext = void 0;
const acorn = __importStar(require("acorn"));
const path_1 = __importDefault(require("path"));
const rollup_1 = require("rollup");
// @ts-ignore
const acorn_class_fields_1 = __importDefault(require("acorn-class-fields"));
// @ts-ignore
const acorn_import_meta_1 = __importDefault(require("acorn-import-meta"));
// @ts-ignore
const acorn_static_class_features_1 = __importDefault(require("acorn-static-class-features"));
const acornOptions = {
    ecmaVersion: 2020,
    preserveParens: false,
    sourceType: 'module',
    allowAwaitOutsideFunction: true,
};
const acornParser = acorn.Parser.extend(acorn_import_meta_1.default, acorn_class_fields_1.default, acorn_static_class_features_1.default);
function createPluginContext(fileWatcher, config, plugin, context) {
    return {
        meta: { rollupVersion: rollup_1.VERSION },
        addWatchFile(id) {
            const filePath = path_1.default.join(process.cwd(), id);
            fileWatcher.add(filePath);
        },
        emitAsset() { },
        emitChunk() { },
        emitFile() { },
        error(err) {
            throw err;
        },
        getAssetFileName() { },
        getChunkFileName() { },
        getFileName() { },
        getModuleIds: () => [],
        getModuleInfo(id) {
            return {
                dynamicallyImportedIds: [],
                dynamicImporters: [],
                hasModuleSideEffects: false,
                id,
                importedIds: [],
                importers: [],
                isEntry: false,
                isExternal: false,
            };
        },
        isExternal() { },
        get moduleIds() {
            return [];
        },
        parse(code, options) {
            return acornParser.parse(code, Object.assign(Object.assign({}, acornOptions), options));
        },
        async resolve(source, importer, options) {
            if (!context)
                throw new Error('Context is required.');
            for (const pl of config.plugins) {
                if (pl.resolveImport &&
                    (!options.skipSelf || pl.resolveImport !== plugin.resolveImport)) {
                    const result = await pl.resolveImport({ source, context });
                    const importerDir = path_1.default.dirname(importer);
                    if (result) {
                        return { id: path_1.default.isAbsolute(result) ? result : path_1.default.join(importerDir, result) };
                    }
                }
            }
        },
        resolveId(source, importer, options) {
            return this.resolve(source, importer, options).then((r) => (r ? r.id : r));
        },
        setAssetSource() { },
        warn(warning) {
            console.warn(warning);
        },
    };
}
exports.createPluginContext = createPluginContext;
