{"version":3,"file":"search-agent.js","sourceRoot":"","sources":["../../src/elements/search-agent.ts"],"names":[],"mappings":"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","sourcesContent":["import { css, html, query, property } from 'lit-element';\n\nimport { TextField } from 'scoped-material-components/mwc-textfield';\nimport { MenuSurface } from 'scoped-material-components/mwc-menu-surface';\nimport { List } from 'scoped-material-components/mwc-list';\nimport { ListItem } from 'scoped-material-components/mwc-list-item';\nimport Avatar from '@ui5/webcomponents/dist/Avatar';\nimport { StoreElement } from '@holochain-open-dev/common';\n\nimport { AgentProfile, Profile } from '../types';\nimport { sharedStyles } from './utils/shared-styles';\nimport { ProfilesStore } from '../profiles.store';\n\n/**\n * @element search-agent\n * @fires agent-selected - Fired when the user selects some agent. `event.detail.agent` will contain the agent selected\n */\nexport abstract class SearchAgent extends StoreElement<ProfilesStore> {\n  /** Public attributes */\n\n  /**\n   * Whether to clear the field when an agent is selected\n   * @attr clear-on-select\n   */\n  @property({ type: Boolean, attribute: 'clear-on-select' })\n  clearOnSelect = false;\n\n  /**\n   * Whether to include my own agent as a possible agent to select\n   * @attr include-myself\n   */\n  @property({ type: Boolean, attribute: 'include-myself' })\n  includeMyself = false;\n\n  /**\n   * Label for the agent searching field\n   * @attr field-label\n   */\n  @property({ type: String, attribute: 'field-label' })\n  fieldLabel = 'Search agent';\n\n  /** Private properties */\n\n  get _filteredAgents(): Array<AgentProfile> {\n    let filtered = this.store.knownProfiles.filter(agent =>\n      agent.profile.nickname.startsWith(this._currentFilter as string)\n    );\n    if (!this.includeMyself) {\n      filtered = filtered.filter(\n        agent => this.store.myAgentPubKey !== agent.agent_pub_key\n      );\n    }\n\n    return filtered;\n  }\n\n  @property({ type: String })\n  _currentFilter: string | undefined = undefined;\n\n  _lastSearchedPrefix: string | undefined = undefined;\n\n  @query('#textfield')\n  _textField!: TextField;\n  @query('#overlay')\n  _overlay!: MenuSurface;\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: flex;\n        }\n        #list {\n          margin-top: 16px;\n          margin-left: 16px;\n        }\n      `,\n    ];\n  }\n  firstUpdated() {\n    this.addEventListener('blur', () => this._overlay.close());\n  }\n\n  async searchAgents(nicknamePrefix: string): Promise<void> {\n    this._lastSearchedPrefix = nicknamePrefix;\n    await this.store.searchProfiles(nicknamePrefix);\n  }\n\n  onFilterChange() {\n    if (this._textField.value.length < 3) return;\n\n    this._overlay.show();\n\n    this._currentFilter = this._textField.value;\n\n    const filterPrefix = this._currentFilter.slice(0, 3);\n    if (filterPrefix !== this._lastSearchedPrefix) {\n      this.searchAgents(filterPrefix);\n    }\n  }\n\n  onUsernameSelected(agent: AgentProfile) {\n    // If nickname matches agent, user has selected it\n    if (agent) {\n      this.dispatchEvent(\n        new CustomEvent('agent-selected', {\n          detail: {\n            agent,\n          },\n        })\n      );\n\n      // If the consumer says so, clear the field\n      if (this.clearOnSelect) {\n        this._textField.value = '';\n      } else {\n        this._textField.value = agent.profile.nickname;\n      }\n      this._overlay.close();\n    }\n  }\n\n  render() {\n    return html`\n      <div style=\"position: relative\">\n        <mwc-textfield\n          id=\"textfield\"\n          class=\"input\"\n          .label=${this.fieldLabel}\n          placeholder=\"At least 3 chars...\"\n          outlined\n          @input=${() => this.onFilterChange()}\n          @focus=${() => this._currentFilter && this._overlay.show()}\n        >\n        </mwc-textfield>\n        <mwc-menu-surface absolute id=\"overlay\" x=\"4\" y=\"28\">\n          ${this._filteredAgents.length > 0\n            ? this._filteredAgents.map(\n                agent => html`\n                  <mwc-list\n                    @selected=${(e: CustomEvent) =>\n                      this.onUsernameSelected(\n                        this._filteredAgents[e.detail.index]\n                      )}\n                    activatable\n                    style=\"min-width: 80px;\"\n                  >\n                    <mwc-list-item\n                      graphic=\"avatar\"\n                      .value=${agent.agent_pub_key}\n                    >\n                      <ui5-avatar\n                        slot=\"graphic\"\n                        image=\"${agent.profile.fields.avatar}\"\n                        size=\"XS\"\n                      ></ui5-avatar>\n                      <span style=\"margin-left: 8px;\"\n                        >${agent.profile.nickname}</span\n                      >\n                    </mwc-list-item>\n                  </mwc-list>\n                `\n              )\n            : html`<mwc-list-item>No agents match the filter</mwc-list-item>`}\n        </mwc-menu-surface>\n      </div>\n    `;\n  }\n\n  getScopedElements() {\n    return {\n      'ui5-avatar': Avatar,\n      'mwc-textfield': TextField,\n      'mwc-menu-surface': MenuSurface,\n      'mwc-list': List,\n      'mwc-list-item': ListItem,\n    };\n  }\n}\n"]}