{"version":3,"file":"profiles.store.js","sourceRoot":"","sources":["../src/profiles.store.ts"],"names":[],"mappings":"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","sourcesContent":["import { serializeHash } from '@holochain-open-dev/core-types';\nimport {\n  observable,\n  makeObservable,\n  action,\n  runInAction,\n  computed,\n} from 'mobx';\nimport { ProfilesService } from './profiles.service';\nimport { AgentProfile, Dictionary, Profile } from './types';\n\nexport class ProfilesStore {\n  @observable\n  public profiles: Dictionary<Profile> = {};\n\n  constructor(protected profilesService: ProfilesService) {\n    makeObservable(this);\n  }\n\n  profileOf(agentPubKey: string): Profile {\n    return this.profiles[agentPubKey];\n  }\n\n  get myAgentPubKey() {\n    return serializeHash(this.profilesService.cellId[1]);\n  }\n\n  @computed\n  get myProfile(): Profile | undefined {\n    return this.profiles[this.myAgentPubKey];\n  }\n\n  @computed\n  get knownProfiles(): Array<AgentProfile> {\n    return Object.entries(this.profiles).map(([agent_pub_key, profile]) => ({\n      agent_pub_key,\n      profile,\n    }));\n  }\n\n  @action\n  public async fetchAllProfiles() {\n    const allProfiles = await this.profilesService.getAllProfiles();\n\n    runInAction(() => {\n      for (const agentProfile of allProfiles) {\n        this.profiles[agentProfile.agent_pub_key] = agentProfile.profile;\n      }\n    });\n  }\n\n  @action\n  public async fetchAgentProfile(agentPubKey: string) {\n    const profile = await this.profilesService.getAgentProfile(agentPubKey);\n\n    if (profile) {\n      runInAction(() => {\n        this.profiles[agentPubKey] = profile.profile;\n      });\n    }\n  }\n\n  @action\n  public async fetchMyProfile() {\n    const myProfile = await this.profilesService.getMyProfile();\n\n    if (myProfile) {\n      runInAction(() => {\n        this.profiles[this.myAgentPubKey] = myProfile.profile;\n      });\n    }\n  }\n\n  @action\n  public async searchProfiles(nicknamePrefix: string) {\n    const searchedProfiles = await this.profilesService.searchProfiles(\n      nicknamePrefix\n    );\n\n    runInAction(() => {\n      for (const { agent_pub_key, profile } of searchedProfiles) {\n        this.profiles[agent_pub_key] = profile;\n      }\n    });\n  }\n\n  @action\n  public async createProfile(profile: Profile) {\n    await this.profilesService.createProfile(profile);\n\n    runInAction(() => {\n      this.profiles[this.myAgentPubKey] = profile;\n    });\n  }\n}\n"]}