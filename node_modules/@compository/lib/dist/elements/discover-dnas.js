import { __decorate } from "tslib";
import { css, html, property } from 'lit-element';
import { sharedStyles } from './sharedStyles';
import { Card } from 'scoped-material-components/mwc-card';
import { List } from 'scoped-material-components/mwc-list';
import { ListItem } from 'scoped-material-components/mwc-list-item';
import { serializeHash } from '@holochain-open-dev/core-types';
import { CircularProgress } from 'scoped-material-components/mwc-circular-progress';
import { Button } from 'scoped-material-components/mwc-button';
import { Snackbar } from 'scoped-material-components/mwc-snackbar';
import { generateDnaBundle } from '../processes/generate-dna-bundle';
import { InstallDnaDialog } from './install-dna-dialog';
import { BaseCompositoryService } from './base';
export class DiscoverDnas extends BaseCompositoryService {
    constructor() {
        super(...arguments);
        this._loading = true;
        this._allInstantiatedDnasHashes = undefined;
        // {[instantiated_dna_hash]: DnaTemplate}
        this._dnaTemplates = {};
    }
    async firstUpdated() {
        const cellIds = await this._compositoryService.adminWebsocket.listCellIds();
        const allInstalledDnaHashes = cellIds.map(cellId => serializeHash(cellId[0]));
        const allInstantiatedDnas = await this._compositoryService.getAllInstantiatedDnas();
        this._allInstantiatedDnasHashes = allInstantiatedDnas.filter(hash => !allInstalledDnaHashes.includes(hash));
        const promises = this._allInstantiatedDnasHashes.map(async (hash) => {
            const template = await this._compositoryService.getTemplateForDna(hash);
            return [hash, template];
        });
        const templateArray = await Promise.all(promises);
        for (const [hash, template] of templateArray) {
            this._dnaTemplates[hash] = template;
        }
        this._loading = false;
    }
    async displayInstallDna(dnaHash, retriesLeft = 3) {
        var _a, _b;
        this._loading = true;
        if (retriesLeft === 0) {
            this._loading = false;
            return;
        }
        try {
            const template = this._dnaTemplates[dnaHash];
            const dnaBundle = await generateDnaBundle(this._compositoryService, template.dnaTemplate, template.properties, template.uuid);
            const dialog = (_a = this.shadowRoot) === null || _a === void 0 ? void 0 : _a.getElementById('install-dialog');
            dialog.dnaBundle = dnaBundle;
            dialog.open();
        }
        catch (e) {
            ((_b = this.shadowRoot) === null || _b === void 0 ? void 0 : _b.getElementById('error-snackbar')).show();
        }
    }
    renderContent() {
        var _a, _b;
        return html ` <mwc-card class="fill">
      <div class="column fill">
        <span style="margin: 16px; margin-bottom: 0;" class="title"
          >Discover DNAs</span
        >

        ${((_a = this._allInstantiatedDnasHashes) === null || _a === void 0 ? void 0 : _a.length) === 0
            ? html `
              <div class="fill column center-content">
                <span class="placeholder" style="max-width: 400px;"
                  >There are no DNAs generated by other agents that you don't
                  have installed</span
                >
              </div>
            `
            : html `
              <div class="flex-scrollable-parent">
                <div class="flex-scrollable-container">
                  <div class="flex-scrollable-y">
                    <mwc-list>
                      ${(_b = this._allInstantiatedDnasHashes) === null || _b === void 0 ? void 0 : _b.map(hash => html `
                            <div class="row" style="align-items: center;">
                              <mwc-list-item twoline style="flex: 1;">
                                <span
                                  >${this._dnaTemplates[hash].dnaTemplate
                .name}</span
                                >
                                <span slot="secondary">${hash}</span>
                              </mwc-list-item>
                              <mwc-button
                                label="INSTALL"
                                raised
                                @click=${() => this.displayInstallDna(hash)}
                                style="margin-right: 16px;"
                              ></mwc-button>
                            </div>
                          `)}
                    </mwc-list>
                  </div>
                </div>
              </div>
            `}
      </div>
    </mwc-card>`;
    }
    renderErrorSnackbar() {
        return html `
      <mwc-snackbar
        id="error-snackbar"
        labelText="Couldn't generate the DNA due to gossip inconsistencies. Please try again in a few minutes."
      ></mwc-snackbar>
    `;
    }
    render() {
        return html `
      ${this.renderErrorSnackbar()}
      <install-dna-dialog id="install-dialog"></install-dna-dialog>
      ${this._loading
            ? html `<div class="fill center-content">
            <mwc-circular-progress indeterminate></mwc-circular-progress>
          </div>`
            : this.renderContent()}
    `;
    }
    static get styles() {
        return [
            sharedStyles,
            css `
        :host {
          display: flex;
        }
      `,
        ];
    }
    getScopedElements() {
        const compositoryService = this._compositoryService;
        return {
            'mwc-card': Card,
            'mwc-button': Button,
            'mwc-snackbar': Snackbar,
            'mwc-list': List,
            'mwc-circular-progress': CircularProgress,
            'mwc-list-item': ListItem,
            'install-dna-dialog': class extends InstallDnaDialog {
                get _compositoryService() {
                    return compositoryService;
                }
            },
        };
    }
}
__decorate([
    property({ type: Boolean })
], DiscoverDnas.prototype, "_loading", void 0);
__decorate([
    property({ type: Array })
], DiscoverDnas.prototype, "_allInstantiatedDnasHashes", void 0);
__decorate([
    property({ type: Array })
], DiscoverDnas.prototype, "_dnaTemplates", void 0);
//# sourceMappingURL=discover-dnas.js.map