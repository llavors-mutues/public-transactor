{"version":3,"file":"compose-zomes.js","sourceRoot":"","sources":["../../src/elements/compose-zomes.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Constructor,\n  css,\n  html,\n  LitElement,\n  property,\n  query,\n} from 'lit-element';\nimport { ScopedElementsMixin as Scoped } from '@open-wc/scoped-elements';\n\nimport { List } from 'scoped-material-components/mwc-list';\nimport { Button } from 'scoped-material-components/mwc-button';\nimport { CheckListItem } from 'scoped-material-components/mwc-check-list-item';\nimport { Snackbar } from 'scoped-material-components/mwc-snackbar';\nimport { CircularProgress } from 'scoped-material-components/mwc-circular-progress';\nimport { sharedStyles } from './sharedStyles';\nimport { AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { TextField } from 'scoped-material-components/mwc-textfield';\nimport {\n  Dictionary,\n  HoloHashed,\n  serializeHash,\n} from '@holochain-open-dev/core-types';\nimport { Card } from 'scoped-material-components/mwc-card';\nimport { DnaTemplate, ZomeDef, ZomeDefReference } from '../types/dnas';\nimport { InstallDnaDialog } from './install-dna-dialog';\nimport { CompositoryService } from '../services/compository-service';\nimport { generateDnaBundle } from '../processes/generate-dna-bundle';\nimport { BaseElement } from '@holochain-open-dev/common';\nimport { BaseCompositoryService } from './base';\n\nexport abstract class ComposeZomes extends BaseCompositoryService {\n  @property()\n  zomeDefs!: Array<HoloHashed<ZomeDef>>;\n\n  @query('#install-dna-dialog')\n  _installDnaDialog!: InstallDnaDialog;\n\n  _dnaTemplateToClone: string | undefined = undefined;\n\n  _selectedIndexes: Set<number> = new Set();\n  @property()\n  _templateName: string | undefined = undefined;\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: flex;\n        }\n      `,\n    ];\n  }\n\n  firstUpdated() {\n    this.loadZomes();\n  }\n\n  async loadZomes() {\n    // TODO: fix this\n    const allZomeDefs = await this._compositoryService.getAllZomeDefs();\n\n    const zomeDefsByName: Dictionary<HoloHashed<ZomeDef>> = {};\n    for (const zomeDef of allZomeDefs) {\n      zomeDefsByName[zomeDef.content.name] = zomeDef;\n    }\n\n    this.zomeDefs = Object.values(zomeDefsByName);\n  }\n\n  async createDnaTemplate() {\n    const zomeDefs: Array<HoloHashed<ZomeDef>> = Array.from(\n      this._selectedIndexes\n    ).map(i => this.zomeDefs[i]);\n\n    const zomeDefReferences: Array<ZomeDefReference> = zomeDefs.map(def => ({\n      name: def.content.name,\n      zome_def_hash: def.hash,\n    }));\n    const dnaTemplate: DnaTemplate = {\n      name: this._templateName as string,\n      zome_defs: zomeDefReferences,\n    };\n    try {\n      this._dnaTemplateToClone = await this._compositoryService.publishDnaTemplate(\n        dnaTemplate\n      );\n\n      const uuid = '';\n      const properties: any[] = [];\n\n      const dnaBundle = await generateDnaBundle(\n        this._compositoryService,\n        dnaTemplate,\n        uuid,\n        properties\n      );\n\n      this._installDnaDialog.dnaBundle = dnaBundle;\n      this._installDnaDialog.open();\n    } catch (e) {\n      (this.shadowRoot?.getElementById('error-snackbar') as Snackbar).show();\n    }\n  }\n\n  async publishInstantiatedDna(cellId: CellId) {\n    if (this._dnaTemplateToClone) {\n      await this._compositoryService.publishInstantiatedDna({\n        dna_template_hash: this._dnaTemplateToClone,\n        instantiated_dna_hash: serializeHash(cellId[0]),\n        properties: null, // TODO\n        uuid: '',\n      });\n    }\n  }\n\n  renderErrorSnackbar() {\n    return html`\n      <mwc-snackbar\n        id=\"error-snackbar\"\n        labelText=\"Couldn't generate the DNA due to gossip inconsistencies. Please try again in a few minutes.\"\n      ></mwc-snackbar>\n    `;\n  }\n\n  render() {\n    if (!this.zomeDefs)\n      return html`<div class=\"fill center-content\">\n        <mwc-circular-progress indeterminate></mwc-circular-progress>\n      </div>`;\n\n    return html` ${this.renderErrorSnackbar()}\n      <install-dna-dialog\n        id=\"install-dna-dialog\"\n        @dna-installed=${(e: CustomEvent) =>\n          this.publishInstantiatedDna(e.detail.cellId)}\n      ></install-dna-dialog>\n      <mwc-card class=\"fill\">\n        <div class=\"column fill\" style=\"margin: 16px; min-height: 0px;\">\n          <span class=\"title\">Compose zomes</span>\n          <mwc-list\n            style=\"overflow-y: auto; flex: 1;\"\n            multi\n            @selected=${(e: CustomEvent) =>\n              (this._selectedIndexes = e.detail.index)}\n          >\n            ${this.zomeDefs.map(\n              zomeDef => html`\n                <mwc-check-list-item\n                  .selected=${zomeDef.content.name === 'blocky' ||\n                  zomeDef.content.name === 'profiles'}\n                  .disabled=${zomeDef.content.name === 'blocky' ||\n                  zomeDef.content.name === 'profiles'}\n                >\n                  ${zomeDef.content.name}\n                </mwc-check-list-item>\n              `\n            )}\n          </mwc-list>\n\n          <div class=\"column\">\n            <mwc-textfield\n              @input=${(e: CustomEvent) =>\n                (this._templateName = (e.target as any).value)}\n              label=\"Dna Template Name\"\n              style=\"margin-bottom: 16px;\"\n              required\n            ></mwc-textfield>\n\n            <mwc-button\n              .disabled=${!this._templateName}\n              raised\n              label=\"GENERATE DNA\"\n              @click=${() => this.createDnaTemplate()}\n            ></mwc-button>\n          </div>\n        </div>\n      </mwc-card>`;\n  }\n\n  getScopedElements() {\n    const compositoryService = this._compositoryService;\n    return {\n      'mwc-list': List,\n      'mwc-check-list-item': CheckListItem,\n      'mwc-circular-progress': CircularProgress,\n      'mwc-button': Button,\n      'mwc-textfield': TextField,\n      'install-dna-dialog': class extends InstallDnaDialog {\n        get _compositoryService() {\n          return compositoryService;\n        }\n      } as typeof HTMLElement,\n      'mwc-card': Card,\n      'mwc-snackbar': Snackbar,\n    };\n  }\n}\n"]}