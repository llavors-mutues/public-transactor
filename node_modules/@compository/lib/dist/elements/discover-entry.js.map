{"version":3,"file":"discover-entry.js","sourceRoot":"","sources":["../../src/elements/discover-entry.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,IAAI,EAAc,QAAQ,EAAkB,KAAK,EAAE,MAAM,aAAa,CAAC;AAChF,OAAO,EAAE,oBAAoB,EAAE,MAAM,uBAAuB,CAAC;AAE7D,OAAO,EAAE,kBAAkB,EAAE,MAAM,2BAA2B,CAAC;AAG/D,OAAO,EAAE,gBAAgB,EAAE,MAAM,kDAAkD,CAAC;AAEpF,OAAO,EAAE,oBAAoB,EAAE,MAAM,sCAAsC,CAAC;AAC5E,OAAO,EAAE,sBAAsB,EAAE,MAAM,QAAQ,CAAC;AAEhD,MAAM,OAAgB,aAAc,SAAQ,sBAAsB;IAAlE;;QAKE,aAAQ,GAAG,IAAI,CAAC;IA8ClB,CAAC;IAzCC,KAAK,CAAC,aAAa;QACjB,MAAM,EACJ,MAAM,EACN,SAAS,EACT,aAAa,EACb,SAAS,GACV,GAAG,MAAM,oBAAoB,CAAC,IAAI,CAAC,mBAAmB,EAAE,IAAI,CAAC,QAAQ,CAAC,CAAC;QAExE,MAAM,CAAC,GAAG,EAAE,aAAa,CAAC,GAAG,MAAM,kBAAkB,CACnD,IAAI,CAAC,mBAAmB,EACxB,MAAM,EACN,SAAS,CACV,CAAC;QAEF,IAAI,aAAa,EAAE;YACjB,MAAM,SAAS,GAAG,MAAM,oBAAoB,CAAC,aAAa,CAAC,CAAC;YAE5D,MAAM,UAAU,GAAG,GAAG,CAAC,UAAU,CAAC,aAAa,CAAC,CAAC;YACjD,SAAS;iBACN,OAAO,CAAC,IAAI,CAAC,mBAAmB,CAAC,YAA4B,EAAE,MAAM,CAAC;iBACtE,WAAW,CAAC,UAAU,CAAC,CAAC,MAAM,CAC7B,IAAI,CAAC,MAAM,CAAC,UAAwB,EACpC,SAAS,CACV,CAAC;SACL;QAED,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;IACxB,CAAC;IAED,MAAM;QACJ,OAAO,IAAI,CAAA,GAAG,IAAI,CAAC,QAAQ;YACvB,CAAC,CAAC,IAAI,CAAA,iDAAiD;YACvD,CAAC,CAAC,IAAI,CAAA,EAAE;2DAC2C,CAAC;IAC1D,CAAC;IAED,MAAM,KAAK,cAAc;QACvB,OAAO;YACL,uBAAuB,EAAE,gBAAgB;SAC1C,CAAC;IACJ,CAAC;CACF;AAjDC;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC;+CACT;AAGlB;IADC,QAAQ,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,CAAC;+CACZ;AAGhB;IADC,KAAK,CAAC,QAAQ,CAAC;6CACU","sourcesContent":["import { html, LitElement, property, PropertyValues, query } from 'lit-element';\nimport { discoverEntryDetails } from '../processes/discover';\nimport { CompositoryScope } from './compository-scope';\nimport { fetchLensesForZome } from '../processes/fetch-lenses';\nimport { CompositoryService } from '../services/compository-service';\nimport { AdminWebsocket, AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { CircularProgress } from 'scoped-material-components/mwc-circular-progress';\nimport { ScopedElementsMixin as Scoped } from '@open-wc/scoped-elements';\nimport { importModuleFromFile } from '../processes/import-module-from-file';\nimport { BaseCompositoryService } from './base';\n\nexport abstract class DiscoverEntry extends BaseCompositoryService {\n  @property({ type: String })\n  entryUri!: string;\n\n  @property({ type: Boolean })\n  _loading = true;\n\n  @query('#scope')\n  _scope!: CompositoryScope;\n\n  async loadRenderers() {\n    const {\n      cellId,\n      zomeIndex,\n      entryDefIndex,\n      entryHash,\n    } = await discoverEntryDetails(this._compositoryService, this.entryUri);\n\n    const [def, renderersFile] = await fetchLensesForZome(\n      this._compositoryService,\n      cellId,\n      zomeIndex\n    );\n\n    if (renderersFile) {\n      const renderers = await importModuleFromFile(renderersFile);\n\n      const entryIdStr = def.entry_defs[entryDefIndex];\n      renderers\n        .default(this._compositoryService.appWebsocket as AppWebsocket, cellId)\n        .entryLenses[entryIdStr].render(\n          this._scope.shadowRoot as ShadowRoot,\n          entryHash\n        );\n    }\n\n    this._loading = false;\n  }\n\n  render() {\n    return html`${this._loading\n        ? html`<mwc-circular-progress></mwc-circular-progress>`\n        : html``}\n      <compository-scope id=\"scope\"> </compository-scope> `;\n  }\n\n  static get scopedElements() {\n    return {\n      'mwc-circular-progress': CircularProgress,\n    };\n  }\n}\n"]}