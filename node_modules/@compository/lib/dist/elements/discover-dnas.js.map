{"version":3,"file":"discover-dnas.js","sourceRoot":"","sources":["../../src/elements/discover-dnas.ts"],"names":[],"mappings":"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","sourcesContent":["import { LitElement, Constructor, css, html, property } from 'lit-element';\nimport { ScopedElementsMixin as Scoped } from '@open-wc/scoped-elements';\nimport { sharedStyles } from './sharedStyles';\nimport { Card } from 'scoped-material-components/mwc-card';\nimport { List } from 'scoped-material-components/mwc-list';\nimport { ListItem } from 'scoped-material-components/mwc-list-item';\nimport { Dictionary, serializeHash } from '@holochain-open-dev/core-types';\nimport { CircularProgress } from 'scoped-material-components/mwc-circular-progress';\nimport { Button } from 'scoped-material-components/mwc-button';\nimport { Snackbar } from 'scoped-material-components/mwc-snackbar';\nimport {\n  CompositoryService,\n  GetTemplateForDnaOutput,\n} from '../services/compository-service';\nimport { generateDnaBundle } from '../processes/generate-dna-bundle';\nimport { InstallDnaDialog } from './install-dna-dialog';\nimport { BaseElement } from '@holochain-open-dev/common';\nimport { BaseCompositoryService } from './base';\n\nexport abstract class DiscoverDnas extends BaseCompositoryService {\n  @property({ type: Boolean })\n  _loading = true;\n\n  @property({ type: Array })\n  _allInstantiatedDnasHashes: Array<string> | undefined = undefined;\n  // {[instantiated_dna_hash]: DnaTemplate}\n  @property({ type: Array })\n  _dnaTemplates: Dictionary<GetTemplateForDnaOutput> = {};\n\n  async firstUpdated() {\n    const cellIds = await this._compositoryService.adminWebsocket.listCellIds();\n    const allInstalledDnaHashes = cellIds.map(cellId =>\n      serializeHash(cellId[0])\n    );\n    const allInstantiatedDnas = await this._compositoryService.getAllInstantiatedDnas();\n    this._allInstantiatedDnasHashes = allInstantiatedDnas.filter(\n      hash => !allInstalledDnaHashes.includes(hash)\n    );\n\n    const promises = this._allInstantiatedDnasHashes.map(async hash => {\n      const template = await this._compositoryService.getTemplateForDna(hash);\n      return [hash, template] as [string, GetTemplateForDnaOutput];\n    });\n\n    const templateArray = await Promise.all(promises);\n\n    for (const [hash, template] of templateArray) {\n      this._dnaTemplates[hash] = template;\n    }\n\n    this._loading = false;\n  }\n\n  async displayInstallDna(dnaHash: string, retriesLeft: number = 3) {\n    this._loading = true;\n\n    if (retriesLeft === 0) {\n      this._loading = false;\n      return;\n    }\n\n    try {\n      const template = this._dnaTemplates[dnaHash];\n\n      const dnaBundle = await generateDnaBundle(\n        this._compositoryService,\n        template.dnaTemplate,\n        template.properties,\n        template.uuid\n      );\n\n      const dialog: InstallDnaDialog = this.shadowRoot?.getElementById(\n        'install-dialog'\n      ) as InstallDnaDialog;\n      dialog.dnaBundle = dnaBundle;\n      dialog.open();\n    } catch (e) {\n      (this.shadowRoot?.getElementById('error-snackbar') as Snackbar).show();\n    }\n  }\n\n  renderContent() {\n    return html` <mwc-card class=\"fill\">\n      <div class=\"column fill\">\n        <span style=\"margin: 16px; margin-bottom: 0;\" class=\"title\"\n          >Discover DNAs</span\n        >\n\n        ${this._allInstantiatedDnasHashes?.length === 0\n          ? html`\n              <div class=\"fill column center-content\">\n                <span class=\"placeholder\" style=\"max-width: 400px;\"\n                  >There are no DNAs generated by other agents that you don't\n                  have installed</span\n                >\n              </div>\n            `\n          : html`\n              <div class=\"flex-scrollable-parent\">\n                <div class=\"flex-scrollable-container\">\n                  <div class=\"flex-scrollable-y\">\n                    <mwc-list>\n                      ${this._allInstantiatedDnasHashes?.map(\n                        hash =>\n                          html`\n                            <div class=\"row\" style=\"align-items: center;\">\n                              <mwc-list-item twoline style=\"flex: 1;\">\n                                <span\n                                  >${this._dnaTemplates[hash].dnaTemplate\n                                    .name}</span\n                                >\n                                <span slot=\"secondary\">${hash}</span>\n                              </mwc-list-item>\n                              <mwc-button\n                                label=\"INSTALL\"\n                                raised\n                                @click=${() => this.displayInstallDna(hash)}\n                                style=\"margin-right: 16px;\"\n                              ></mwc-button>\n                            </div>\n                          `\n                      )}\n                    </mwc-list>\n                  </div>\n                </div>\n              </div>\n            `}\n      </div>\n    </mwc-card>`;\n  }\n\n  renderErrorSnackbar() {\n    return html`\n      <mwc-snackbar\n        id=\"error-snackbar\"\n        labelText=\"Couldn't generate the DNA due to gossip inconsistencies. Please try again in a few minutes.\"\n      ></mwc-snackbar>\n    `;\n  }\n  render() {\n    return html`\n      ${this.renderErrorSnackbar()}\n      <install-dna-dialog id=\"install-dialog\"></install-dna-dialog>\n      ${this._loading\n        ? html`<div class=\"fill center-content\">\n            <mwc-circular-progress indeterminate></mwc-circular-progress>\n          </div>`\n        : this.renderContent()}\n    `;\n  }\n\n  static get styles() {\n    return [\n      sharedStyles,\n      css`\n        :host {\n          display: flex;\n        }\n      `,\n    ];\n  }\n\n  getScopedElements() {\n    const compositoryService = this._compositoryService;\n    return {\n      'mwc-card': Card,\n      'mwc-button': Button,\n      'mwc-snackbar': Snackbar,\n      'mwc-list': List,\n      'mwc-circular-progress': CircularProgress,\n      'mwc-list-item': ListItem,\n      'install-dna-dialog': class extends InstallDnaDialog {\n        get _compositoryService() {\n          return compositoryService;\n        }\n      } as typeof HTMLElement,\n    };\n  }\n}\n"]}