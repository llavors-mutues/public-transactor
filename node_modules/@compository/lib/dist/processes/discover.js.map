{"version":3,"file":"discover.js","sourceRoot":"","sources":["../../src/processes/discover.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAC;AAQ/D,KAAK,UAAU,wBAAwB,CACrC,YAA0B,EAC1B,MAAc,EACd,SAAiB;IAEjB,MAAM,OAAO,GAAiB,MAAM,YAAY,CAAC,QAAQ,CAAC;QACxD,GAAG,EAAE,IAAI;QACT,OAAO,EAAE,MAAM;QACf,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;QACrB,SAAS,EAAE,QAAQ;QACnB,OAAO,EAAE,mBAAmB;QAC5B,OAAO,EAAE,SAAS;KACnB,CAAC,CAAC;IAEH,MAAM,MAAM,GAAG,OAAO,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC;IAEzC,MAAM,MAAM,GAAG,MAAM,CAAC,OAAiB,CAAC;IAExC,MAAM,YAAY,GAAI,MAAM,CAAC,UAE3B,CAAC,GAAG,CAAC;IAEP,OAAO;QACL,MAAM;QACN,SAAS,EAAE,YAAY,CAAC,OAAO;QAC/B,aAAa,EAAE,YAAY,CAAC,EAAE;QAC9B,SAAS;KACV,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,oBAAoB,CACxC,kBAAsC,EACtC,QAAgB;IAEhB,yCAAyC;IACzC,MAAM,CAAC,OAAO,EAAE,SAAS,CAAC,GAAG,QAAQ,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;IAEnD,iDAAiD;IACjD,MAAM,OAAO,GAAG,MAAM,kBAAkB,CAAC,cAAc,CAAC,WAAW,EAAE,CAAC;IACtE,IAAI,MAAM,GAAG,OAAO,CAAC,IAAI,CAAC,MAAM,CAAC,EAAE,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,OAAO,CAAC,CAAC;IAE1E,iDAAiD;IACjD,IAAI,CAAC,MAAM,EAAE;QACX,iBAAiB;QACjB,0EAA0E;KAC3E;IAED,oDAAoD;IACpD,OAAO,wBAAwB,CAC7B,kBAAkB,CAAC,YAAY,EAC/B,MAAgB,EAChB,SAAS,CACV,CAAC;AACJ,CAAC","sourcesContent":["import { AdminWebsocket, AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { CompositoryService } from '../services/compository-service';\nimport { serializeHash } from '@holochain-open-dev/core-types';\nimport { EntryDefLocator } from '../types/dnas';\nimport {\n  AppEntryType,\n  Create,\n  EntryDetails,\n} from '@holochain-open-dev/core-types';\n\nasync function fetchZomeAndEntryIndexes(\n  appWebsocket: AppWebsocket,\n  cellId: CellId,\n  entryHash: string\n): Promise<EntryDefLocator> {\n  const details: EntryDetails = await appWebsocket.callZome({\n    cap: null,\n    cell_id: cellId,\n    provenance: cellId[1],\n    zome_name: 'common',\n    fn_name: 'get_entry_details',\n    payload: entryHash,\n  });\n\n  const header = details.headers[0].header;\n\n  const create = header.content as Create;\n\n  const appEntryType = (create.entry_type as {\n    App: AppEntryType;\n  }).App;\n\n  return {\n    cellId,\n    zomeIndex: appEntryType.zome_id,\n    entryDefIndex: appEntryType.id,\n    entryHash,\n  };\n}\n\nexport async function discoverEntryDetails(\n  compositoryService: CompositoryService,\n  entryUri: string\n): Promise<EntryDefLocator> {\n  // For now only <DNA_HASH>://<ENTRY_HASH>\n  const [dnaHash, entryHash] = entryUri.split('://');\n\n  // Find the cellId corresponding to the given dna\n  const cellIds = await compositoryService.adminWebsocket.listCellIds();\n  let cellId = cellIds.find(cellId => serializeHash(cellId[0]) === dnaHash);\n\n  // If we don't have the dna installed, install it\n  if (!cellId) {\n    // TODO: Fix this\n    // cellId = await installDna(adminWebsocket, compositoryService, dnaHash);\n  }\n\n  // Fetch information about the entry from its header\n  return fetchZomeAndEntryIndexes(\n    compositoryService.appWebsocket,\n    cellId as CellId,\n    entryHash\n  );\n}\n"]}