{"version":3,"file":"fetch-lenses.js","sourceRoot":"","sources":["../../src/processes/fetch-lenses.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,aAAa,EAAE,MAAM,gCAAgC,CAAC;AAO/D,MAAM,CAAC,KAAK,UAAU,kBAAkB,CACtC,kBAAsC,EACtC,MAAc,EACd,SAAiB;IAEjB,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAEzC,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAErE,MAAM,WAAW,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,aAAa,CAAC;IAC5E,OAAO,0BAA0B,CAAC,kBAAkB,EAAE,WAAW,CAAC,CAAC;AACrE,CAAC;AAED,MAAM,CAAC,KAAK,UAAU,sBAAsB,CAC1C,kBAAsC,EACtC,MAAc;IAEd,MAAM,OAAO,GAAG,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;IAEzC,MAAM,QAAQ,GAAG,MAAM,kBAAkB,CAAC,iBAAiB,CAAC,OAAO,CAAC,CAAC;IAErE,MAAM,QAAQ,GAAG,QAAQ,CAAC,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,QAAQ,CAAC,EAAE,CAC7D,0BAA0B,CACxB,kBAAkB,EAClB,QAAQ,CAAC,aAAa,CACvB,CACF,CAAC;IACF,OAAO,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;AACrC,CAAC;AAED,KAAK,UAAU,0BAA0B,CACvC,kBAAsC,EACtC,WAAmB;IAEnB,sDAAsD;IACtD,MAAM,OAAO,GAAG,MAAM,kBAAkB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IAEjE,IAAI,CAAC,OAAO,CAAC,sBAAsB,EAAE;QACnC,OAAO,CAAC,OAAO,EAAE,SAAS,CAAC,CAAC;KAC7B;IAED,MAAM,IAAI,GAAG,MAAM,kBAAkB,CAAC,YAAY,CAChD,OAAO,CAAC,sBAAsB,CAC/B,CAAC;IAEF,OAAO,CAAC,OAAO,EAAE,IAAI,CAAC,CAAC;AACzB,CAAC","sourcesContent":["import { serializeHash } from '@holochain-open-dev/core-types';\nimport { CellId } from '@holochain/conductor-api';\nimport { CompositoryService } from '../services/compository-service';\nimport { ZomeDef } from '../types/dnas';\nimport { Lenses, SetupLenses } from '../types/lenses';\nimport { importModuleFromFile } from './import-module-from-file';\n\nexport async function fetchLensesForZome(\n  compositoryService: CompositoryService,\n  cellId: CellId,\n  zomeIndex: number\n): Promise<[ZomeDef, File?]> {\n  const dnaHash = serializeHash(cellId[0]);\n\n  const template = await compositoryService.getTemplateForDna(dnaHash);\n\n  const zomeDefHash = template.dnaTemplate.zome_defs[zomeIndex].zome_def_hash;\n  return internalFetchLensesForZome(compositoryService, zomeDefHash);\n}\n\nexport async function fetchLensesForAllZomes(\n  compositoryService: CompositoryService,\n  cellId: CellId\n): Promise<Array<[ZomeDef, File?]>> {\n  const dnaHash = serializeHash(cellId[0]);\n\n  const template = await compositoryService.getTemplateForDna(dnaHash);\n\n  const promises = template.dnaTemplate.zome_defs.map(zome_def =>\n    internalFetchLensesForZome(\n      compositoryService,\n      zome_def.zome_def_hash\n    )\n  );\n  return await Promise.all(promises);\n}\n\nasync function internalFetchLensesForZome(\n  compositoryService: CompositoryService,\n  zomeDefHash: string\n): Promise<[ZomeDef, File?]> {\n  // Fetch the appropriate elements bundle for this zome\n  const zomeDef = await compositoryService.getZomeDef(zomeDefHash);\n\n  if (!zomeDef.components_bundle_file) {\n    return [zomeDef, undefined];\n  }\n\n  const file = await compositoryService.downloadFile(\n    zomeDef.components_bundle_file\n  );\n\n  return [zomeDef, file];\n}\n"]}