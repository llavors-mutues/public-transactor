{"version":3,"file":"generate-dna-bundle.js","sourceRoot":"","sources":["../../src/processes/generate-dna-bundle.ts"],"names":[],"mappings":"AAIA,MAAM,CAAC,KAAK,UAAU,iBAAiB,CACrC,kBAAsC,EACtC,WAAwB,EACxB,IAAY,EACZ,UAAe;IAEf,oCAAoC;IACpC,MAAM,QAAQ,GAAG,WAAW,CAAC,SAAS,CAAC,GAAG,CAAC,KAAK,EAAC,QAAQ,EAAC,EAAE,CAC1D,SAAS,CAAC,kBAAkB,EAAE,QAAQ,CAAC,aAAa,CAAC,CACtD,CAAC;IACF,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;IAE1C,wBAAwB;IACxB,MAAM,aAAa,GAAG,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC;IACjE,MAAM,KAAK,GAAG,MAAM,OAAO,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;IAE/C,MAAM,SAAS,GAAG,KAAK,CAAC,MAAM,CAC5B,CAAC,GAAG,EAAE,IAAI,EAAE,CAAC,EAAE,EAAE,CAAC,CAAC;QACjB,GAAG,GAAG;QACN,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,CAAC,IAAI,CAAC,IAAI,UAAU,CAAC,IAAI,CAAC,CAAC;KAC1D,CAAC,EACF,EAAE,CACH,CAAC;IAEF,gBAAgB;IAChB,MAAM,SAAS,GAAc;QAC3B,QAAQ,EAAE;YACR,IAAI,EAAE,WAAW,CAAC,IAAI;YACtB,IAAI;YACJ,UAAU;YACV,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;gBACxB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;gBACvB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;gBAC5B,OAAO,EAAE,IAAI,CAAC,OAAO,CAAC,IAAI;aAC3B,CAAC,CAAQ;SACX;QACD,SAAS;KACV,CAAC;IAEF,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,KAAK,UAAU,SAAS,CACtB,kBAAsC,EACtC,WAAmB;IAEnB,MAAM,OAAO,GAAG,MAAM,kBAAkB,CAAC,UAAU,CAAC,WAAW,CAAC,CAAC;IAEjE,MAAM,IAAI,GAAG,MAAM,kBAAkB,CAAC,YAAY,CAAC,OAAO,CAAC,SAAS,CAAC,CAAC;IACtE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,CAAC;AAC3B,CAAC","sourcesContent":["import { CompositoryService } from '../services/compository-service';\nimport { DnaTemplate, ZomeDef } from '../types/dnas';\nimport { DnaBundle } from '@holochain/conductor-api';\n\nexport async function generateDnaBundle(\n  compositoryService: CompositoryService,\n  dnaTemplate: DnaTemplate,\n  uuid: string,\n  properties: any\n): Promise<DnaBundle> {\n  // Fetch all zomes for that template\n  const promises = dnaTemplate.zome_defs.map(async zome_def =>\n    fetchZome(compositoryService, zome_def.zome_def_hash)\n  );\n  const zomes = await Promise.all(promises);\n\n  // Prepare the arguments\n  const codesPromises = zomes.map(zome => zome.file.arrayBuffer());\n  const codes = await Promise.all(codesPromises);\n\n  const resources = codes.reduce(\n    (acc, next, i) => ({\n      ...acc,\n      [zomes[i].zomeDef.name]: Array.from(new Uint8Array(next)),\n    }),\n    {}\n  );\n\n  // Create bundle\n  const dnaBundle: DnaBundle = {\n    manifest: {\n      name: dnaTemplate.name,\n      uuid,\n      properties,\n      zomes: zomes.map(zome => ({\n        name: zome.zomeDef.name,\n        hash: zome.zomeDef.wasm_hash,\n        bundled: zome.zomeDef.name,\n      })) as any,\n    },\n    resources,\n  };\n\n  return dnaBundle;\n}\n\nasync function fetchZome(\n  compositoryService: CompositoryService,\n  zomeDefHash: string\n): Promise<{ zomeDef: ZomeDef; file: File }> {\n  const zomeDef = await compositoryService.getZomeDef(zomeDefHash);\n\n  const file = await compositoryService.downloadFile(zomeDef.wasm_file);\n  return { zomeDef, file };\n}\n"]}