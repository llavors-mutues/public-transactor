
/* eslint no-unused-vars: 0 */
import ifDefined from '@ui5/webcomponents-base/dist/renderer/ifDefined.js';
import { html, svg, repeat, classMap, styleMap, unsafeHTML, setTags, setSuffix } from '@ui5/webcomponents-base/dist/renderer/LitRenderer.js';
const block0 = (context) => { return html`<ui5-responsive-popover no-arrow content-only-on-desktop _disable-initial-focus placement-type="Bottom" horizontal-align="Left" @ui5-after-open=${ifDefined(context._afterOpenPopover)} @ui5-after-close=${ifDefined(context._afterClosePopover)}><ui5-busyindicator ?active=${context.loading} size="Medium" class="ui5-combobox-busy"></ui5-busyindicator><div slot="header" class="ui5-responsive-popover-header"><div class="row"><span>${ifDefined(context._headerTitleText)}</span><ui5-button class="ui5-responsive-popover-close-btn" icon="decline" design="Transparent" @click="${context._closeRespPopover}"></ui5-button></div><div class="row"><div class="input-root-phone" value-state="${ifDefined(context.valueState)}"><input class="ui5-input-inner-phone" .value="${ifDefined(context._tempValue)}" inner-input placeholder="${ifDefined(context.placeholder)}" value-state="${ifDefined(context.valueState)}" @input="${context._input}" @change="${context._inputChange}" @keydown="${context._keydown}" aria-autocomplete="both" /></div></div>${ context.hasValueStateText ? block1(context) : undefined }</div>${ !context._isPhone ? block5(context) : undefined }<ui5-list separators="None" @ui5-item-click=${ifDefined(context._selectItem)} @ui5-item-focused=${ifDefined(context._onItemFocus)} @mousedown=${context._itemMousedown} mode="SingleSelect">${ repeat(context._filteredItems, (item, index) => item._id || index, (item, index) => block10(item, index, context)) }</ui5-list><div slot="footer" class="ui5-responsive-popover-footer"><ui5-button design="Transparent" @click="${context._closeRespPopover}">OK</ui5-button></div></ui5-responsive-popover>${ context.shouldOpenValueStateMessagePopover ? block11(context) : undefined }`; };
const block1 = (context) => { return html`<div class="row ${classMap(context.classes.popoverValueState)}">${ context.shouldDisplayDefaultValueStateMessage ? block2(context) : block3(context) }</div>`; };
const block2 = (context) => { return html`${ifDefined(context.valueStateText)}`; };
const block3 = (context) => { return html`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block4(item, index, context)) }`; };
const block4 = (item, index, context) => { return html`${ifDefined(item)}`; };
const block5 = (context) => { return html`${ context.hasValueStateText ? block6(context) : undefined }`; };
const block6 = (context) => { return html`<div class="ui5-responsive-popover-header ${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.suggestionPopoverHeader)}">${ context.shouldDisplayDefaultValueStateMessage ? block7(context) : block8(context) }</div>`; };
const block7 = (context) => { return html`${ifDefined(context.valueStateText)}`; };
const block8 = (context) => { return html`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block9(item, index, context)) }`; };
const block9 = (item, index, context) => { return html`${ifDefined(item)}`; };
const block10 = (item, index, context) => { return html`<ui5-li type="Active" info=${ifDefined(item.additionalText)} ._tabIndex=${ifDefined(item.itemTabIndex)} .mappedItem=${ifDefined(item)} ?selected=${item.selected} ?focused=${item.focused}>${ifDefined(item.text)}</ui5-li>`; };
const block11 = (context) => { return html`<ui5-popover skip-registry-update _disable-initial-focus prevent-focus-restore no-padding no-arrow class="ui5-valuestatemessage-popover" placement-type="Bottom"><div slot="header" class="${classMap(context.classes.popoverValueState)}" style="${styleMap(context.styles.popoverHeader)}">${ context.shouldDisplayDefaultValueStateMessage ? block12(context) : block13(context) }</div></ui5-popover>`; };
const block12 = (context) => { return html`${ifDefined(context.valueStateText)}`; };
const block13 = (context) => { return html`${ repeat(context.valueStateMessageText, (item, index) => item._id || index, (item, index) => block14(item, index, context)) }`; };
const block14 = (item, index, context) => { return html`${ifDefined(item)}`; };


const main = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0(context);
};
 
export default main;