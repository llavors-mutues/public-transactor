
/* eslint no-unused-vars: 0 */
import ifDefined from '@ui5/webcomponents-base/dist/renderer/ifDefined.js';
import { html, svg, repeat, classMap, styleMap, unsafeHTML, setTags, setSuffix } from '@ui5/webcomponents-base/dist/renderer/LitRenderer.js';
const block0 = (context) => { return html`<div id="${ifDefined(context._id)}" ?disabled= "${ifDefined(context.disabled)}" value = "${ifDefined(context.value)}" label = "${ifDefined(context.label)}" @click = ${ifDefined(context._onclick)} @keydown=${context._onkeydown} class = "${classMap(context.classes.root)}" data-sap-focus-ref tabindex="0" @wheel="${context._handleWheel}"><div class="ui5-wheelslider-header-block"><div id="${ifDefined(context._id)}--label" class="ui5-wheelslider-label">${ifDefined(context.label)}</div><div class="ui5-wheelslider-invisible-text"></div><ui5-button class="ui5-wheelslider-arrow" icon="navigation-up-arrow" @click=${context._onArrowUp} tabindex="-1"></ui5-button></div><div id="${ifDefined(context._id)}--inner" class="ui5-wheelslider-inner"><div id="${ifDefined(context._id)}--selection-frame" class="ui5-wheelslider-selection-frame"></div><div id="${ifDefined(context._id)}--wrapper" class="ui5-wheelslider-wrapper">${ context.expanded ? block1(context) : block3(context) }</div></div><div class="ui5-wheelslider-footer-block"><ui5-button class="ui5-wheelslider-arrow" icon="navigation-down-arrow" @click=${context._onArrowDown} tabindex="-1"></ui5-button></div></div>`; };
const block1 = (context) => { return html`<ul id="${ifDefined(context._id)}--items-list">${ repeat(context._itemsToShow, (item, index) => item._id || index, (item, index) => block2(item, index, context)) }</ul>`; };
const block2 = (item, index, context) => { return html`<li class="ui5-wheelslider-item" data-item-index="${index}" style="list-style-type: none;">${ifDefined(item)}</li>`; };
const block3 = (context) => { return html`<ul id="${ifDefined(context._id)}--items-list"><li class="ui5-wheelslider-item" style="list-style-type: none;">${ifDefined(context.value)}</li></ul>`; };


const main = (context, tags, suffix) => {
	setTags(tags);
	setSuffix(suffix);
	return block0(context);
};
 
export default main;