{"version":3,"file":"public-transactor.service.js","sourceRoot":"","sources":["../src/public-transactor.service.ts"],"names":[],"mappings":"AAAA,OAAO,EAAc,iBAAiB,EAAE,MAAM,gCAAgC,CAAC;AAI/E,MAAM,OAAO,uBAAuB;IAClC,YACS,YAA0B,EAC1B,MAAc,EACd,WAAW,YAAY;QAFvB,iBAAY,GAAZ,YAAY,CAAc;QAC1B,WAAM,GAAN,MAAM,CAAQ;QACd,aAAQ,GAAR,QAAQ,CAAe;IAC7B,CAAC;IAEJ,KAAK,CAAC,cAAc;QAClB,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,EAAE,IAAI,CAAC,CAAC;IACzC,CAAC;IAED,KAAK,CAAC,eAAe,CAAC,WAAmB;QACvC,OAAO,IAAI,CAAC,QAAQ,CAAC,uBAAuB,EAAE,WAAW,CAAC,CAAC;IAC7D,CAAC;IAED,KAAK,CAAC,oBAAoB,CACxB,WAAmB;QAEnB,MAAM,YAAY,GAAG,MAAM,IAAI,CAAC,QAAQ,CACtC,4BAA4B,EAC5B,WAAW,CACZ,CAAC;QACF,OAAO,YAAY,CAAC,GAAG,CAAC,CAAC,CAAM,EAAE,EAAE,CAAC,CAAC;YACnC,IAAI,EAAE,CAAC,CAAC,IAAI;YACZ,OAAO,EAAE;gBACP,GAAG,CAAC,CAAC,OAAO;gBACZ,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC,OAAO,CAAC,SAAS,CAAC;aAClD;SACF,CAAC,CAAC,CAAC;IACN,CAAC;IAED,KAAK,CAAC,oBAAoB;QACxB,OAAO,IAAI,CAAC,QAAQ,CAAC,yBAAyB,EAAE,IAAI,CAAC,CAAC;IACxD,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,eAAuB,EAAE,MAAc;QACvD,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE;YACnC,iBAAiB,EAAE,eAAe;YAClC,MAAM;SACP,CAAC,CAAC;IACL,CAAC;IAED,KAAK,CAAC,WAAW,CAAC,SAAiB;QACjC,OAAO,IAAI,CAAC,QAAQ,CAAC,cAAc,EAAE,SAAS,CAAC,CAAC;IAClD,CAAC;IACD;;;;;;;;;;;QAWI;IAEI,QAAQ,CAAC,OAAe,EAAE,OAAY;QAC5C,OAAO,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC;YAChC,GAAG,EAAE,IAAW;YAChB,OAAO,EAAE,IAAI,CAAC,MAAM;YACpB,SAAS,EAAE,IAAI,CAAC,QAAQ;YACxB,OAAO;YACP,OAAO;YACP,UAAU,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;SAC3B,CAAC,CAAC;IACL,CAAC;CACF","sourcesContent":["import { HoloHashed, timestampToMillis } from '@holochain-open-dev/core-types';\nimport { AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { Offer, Transaction } from './types';\n\nexport class PublicTransactorService {\n  constructor(\n    public appWebsocket: AppWebsocket,\n    public cellId: CellId,\n    public zomeName = 'transactor'\n  ) {}\n\n  async getMyPublicKey(): Promise<string> {\n    return this.callZome('who_am_i', null);\n  }\n\n  async getAgentBalance(agentPubKey: string): Promise<number> {\n    return this.callZome('get_balance_for_agent', agentPubKey);\n  }\n\n  async getAgentTransactions(\n    agentPubKey: string\n  ): Promise<Array<HoloHashed<Transaction>>> {\n    const transactions = await this.callZome(\n      'get_transactions_for_agent',\n      agentPubKey\n    );\n    return transactions.map((t: any) => ({\n      hash: t.hash,\n      content: {\n        ...t.content,\n        timestamp: timestampToMillis(t.content.timestamp),\n      },\n    }));\n  }\n\n  async queryMyPendingOffers(): Promise<Array<HoloHashed<Offer>>> {\n    return this.callZome('query_my_pending_offers', null);\n  }\n\n  async createOffer(recipientPubKey: string, amount: number): Promise<string> {\n    return this.callZome('create_offer', {\n      recipient_pub_key: recipientPubKey,\n      amount,\n    });\n  }\n\n  async acceptOffer(offerHash: string): Promise<string> {\n    return this.callZome('accept_offer', offerHash);\n  }\n  /* \n  async cancelOffer(offerHash: string) {\n    await this.callZome('cancel_offer', {\n      offer_hash: offerHash,\n    });\n  }\n\n  async rejectOffer(offerHash: string) {\n    await this.callZome('reject_offer', {\n      offer_hash: offerHash,\n    });\n  } */\n\n  private callZome(fn_name: string, payload: any) {\n    return this.appWebsocket.callZome({\n      cap: null as any,\n      cell_id: this.cellId,\n      zome_name: this.zomeName,\n      fn_name,\n      payload,\n      provenance: this.cellId[1],\n    });\n  }\n}\n"]}