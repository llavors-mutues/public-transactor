{"version":3,"file":"bundle.js","sourceRoot":"","sources":["../src/bundle.ts"],"names":[],"mappings":"AACA,OAAO,EAAE,YAAY,EAAU,MAAM,0BAA0B,CAAC;AAChE,OAAO,EAAE,WAAW,EAAE,MAAM,yBAAyB,CAAC;AAEtD,YAAY;AACZ,OAAO,EAAE,eAAe,EAAE,MAAM,8CAA8C,CAAC;AAC/E,OAAO,EAAE,eAAe,EAAE,MAAM,oBAAoB,CAAC;AACrD,OAAO,EAAE,uBAAuB,EAAE,MAAM,6BAA6B,CAAC;AACtE,OAAO,EAAE,QAAQ,EAAE,MAAM,sBAAsB,CAAC;AAChD,OAAO,EAAE,eAAe,EAAE,MAAM,8BAA8B,CAAC;AAC/D,OAAO,EAAE,aAAa,EAAE,MAAM,6CAA6C,CAAC;AAC5E,OAAO,EAAE,YAAY,EAAE,MAAM,4BAA4B,CAAC;AAC1D,OAAO,EAAE,SAAS,EAAE,MAAM,uBAAuB,CAAC;AAElD,SAAS,YAAY,CACnB,GAAW,EACX,SAAmC,EACnC,IAAgB;IAEhB,MAAM,QAAQ,GAAG,cAAc,CAAC;IAChC,MAAM,SAAS,GAAG,eAAe,CAAC,GAAG,EAAE,QAAQ,CAAC,CAAC;IACjD,IAAI,CAAC,SAAS,GAAG;;;;;aAKN,SAAS,MAAM,SAAS;SAC5B,CAAC;IAER,QAAQ,CAAC,MAAM,CACb,SAAS,EACR,KAAM,SAAQ,SAAS;KAA2C,CACpE,CAAC;AACJ,CAAC;AAED,MAAM,CAAC,OAAO,UAAU,MAAM,CAC5B,YAA0B,EAC1B,MAAc;IAEd,MAAM,eAAe,GAAG,IAAI,eAAe,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAClE,MAAM,aAAa,GAAG,IAAI,aAAa,CAAC,eAAe,CAAC,CAAC;IAEzD,MAAM,OAAO,GAAG,IAAI,uBAAuB,CAAC,YAAY,EAAE,MAAM,CAAC,CAAC;IAClE,MAAM,KAAK,GAAG,IAAI,eAAe,CAAC,OAAO,EAAE,aAAa,CAAC,CAAC;IAE1D,MAAM,cAAc,GAAG,YAAY,CAAC,OAAO,CACzC,YAAY,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAC9B,KAAK,EACL,MAAM,CAAC,EAAE;QACP,MAAM,OAAO,GAAG,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC;QACpC,IAAI,OAAO,CAAC,aAAa,EAAE;YACzB,KAAK,CAAC,UAAU,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;SACzC;aAAM,IAAI,OAAO,CAAC,aAAa,EAAE;YAChC,KAAK,CAAC,gBAAgB,CAAC,OAAO,CAAC,aAAa,CAAC,CAAC;SAC/C;IACH,CAAC,CACF,CAAC;IAEF,OAAO;QACL,UAAU,EAAE;YACV;gBACE,IAAI,EAAE,WAAW;gBACjB,MAAM,CAAC,IAAgB;oBACrB,YAAY,CAAC,WAAW,EAAE,YAAY,CAAC,QAAQ,EAAE,KAAK,CAAC,EAAE,IAAI,CAAC,CAAC;gBACjE,CAAC;aACF;YACD;gBACE,IAAI,EAAE,YAAY;gBAClB,MAAM,CAAC,IAAgB;oBACrB,YAAY,CACV,YAAY,EACZ,YAAY,CAAC,SAAS,EAAE,KAAK,CAAC,EAC9B,IAAI,CACL,CAAC;gBACJ,CAAC;aACF;YACD;gBACE,IAAI,EAAE,cAAc;gBACpB,MAAM,CAAC,IAAgB;oBACrB,YAAY,CACV,cAAc,EACd,YAAY,CAAC,WAAW,EAAE,KAAK,CAAC,EAChC,IAAI,CACL,CAAC;gBACJ,CAAC;aACF;SACF;QACD,WAAW,EAAE,EAAE;QACf,iBAAiB,EAAE,EAAE;KACtB,CAAC;AACJ,CAAC","sourcesContent":["import { Lenses } from '@compository/lib';\nimport { AppWebsocket, CellId } from '@holochain/conductor-api';\nimport { CreateOffer } from './elements/create-offer';\nimport { Constructor } from 'lit-element';\n//@ts-ignore\nimport { createUniqueTag } from '@open-wc/scoped-elements/src/createUniqueTag';\nimport { TransactorStore } from './transactor.store';\nimport { PublicTransactorService } from './public-transactor.service';\nimport { MyOffers } from './elements/my-offers';\nimport { ProfilesService } from '@holochain-open-dev/profiles';\nimport { ProfilesStore } from '@holochain-open-dev/profiles/profiles.store';\nimport { connectStore } from '@holochain-open-dev/common';\nimport { MyBalance } from './elements/my-balance';\n\nfunction renderUnique(\n  tag: string,\n  baseClass: Constructor<HTMLElement>,\n  root: ShadowRoot\n) {\n  const registry = customElements;\n  const uniqueTag = createUniqueTag(tag, registry);\n  root.innerHTML = `\n        <link\n          href=\"https://fonts.googleapis.com/icon?family=Material+Icons\"\n          rel=\"stylesheet\"\n        />\n          <${uniqueTag}></${uniqueTag}>\n        `;\n\n  registry.define(\n    uniqueTag,\n    (class extends baseClass {} as unknown) as Constructor<HTMLElement>\n  );\n}\n\nexport default function lenses(\n  appWebsocket: AppWebsocket,\n  cellId: CellId\n): Lenses {\n  const profilesService = new ProfilesService(appWebsocket, cellId);\n  const profilesStore = new ProfilesStore(profilesService);\n\n  const service = new PublicTransactorService(appWebsocket, cellId);\n  const store = new TransactorStore(service, profilesStore);\n\n  const signalReceiver = AppWebsocket.connect(\n    appWebsocket.client.socket.url,\n    12000,\n    signal => {\n      const payload = signal.data.payload;\n      if (payload.OfferReceived) {\n        store.storeOffer(payload.OfferReceived);\n      } else if (payload.OfferAccepted) {\n        store.storeTransaction(payload.OfferAccepted);\n      }\n    }\n  );\n\n  return {\n    standalone: [\n      {\n        name: 'My Offers',\n        render(root: ShadowRoot) {\n          renderUnique('my-offers', connectStore(MyOffers, store), root);\n        },\n      },\n      {\n        name: 'My Balance',\n        render(root: ShadowRoot) {\n          renderUnique(\n            'my-balance',\n            connectStore(MyBalance, store),\n            root\n          );\n        },\n      },\n      {\n        name: 'Create Offer',\n        render(root: ShadowRoot) {\n          renderUnique(\n            'create-offer',\n            connectStore(CreateOffer, store),\n            root\n          );\n        },\n      },\n    ],\n    entryLenses: {},\n    attachmentsLenses: [],\n  };\n}\n"]}