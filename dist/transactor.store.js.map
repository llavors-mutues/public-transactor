{"version":3,"file":"transactor.store.js","sourceRoot":"","sources":["../src/transactor.store.ts"],"names":[],"mappings":"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","sourcesContent":["import { Dictionary } from '@compository/lib';\nimport { HoloHashed, serializeHash } from '@holochain-open-dev/core-types';\nimport { ProfilesStore } from '@holochain-open-dev/profiles/profiles.store';\nimport {\n  observable,\n  action,\n  runInAction,\n  computed,\n  makeObservable,\n} from 'mobx';\nimport { PublicTransactorService } from './public-transactor.service';\nimport { Multiparty, Offer, Transaction } from './types';\n\nexport class TransactorStore {\n  @observable\n  public offers: Dictionary<Offer> = {};\n  @observable\n  public transactions: Dictionary<Transaction> = {};\n\n  constructor(\n    protected transactorService: PublicTransactorService,\n    public profilesStore: ProfilesStore\n  ) {\n    makeObservable(this);\n  }\n\n  get myAgentPubKey() {\n    return serializeHash(this.transactorService.cellId[1]);\n  }\n\n  @computed\n  get myPendingOffers(): HoloHashed<Offer>[] {\n    return Object.entries(this.offers)\n      .filter(\n        ([hash, offer]) =>\n          !Object.values(this.transactions).find(t => t.offer_hash == hash)\n      )\n      .map(([hash, offer]) => ({\n        hash,\n        content: offer,\n      }));\n  }\n\n  @computed\n  get myTransactions(): HoloHashed<Transaction>[] {\n    return Object.entries(this.transactions)\n      .sort(\n        ([_, transaction1], [__, transaction2]) =>\n          transaction2.timestamp - transaction1.timestamp\n      )\n      .map(([hash, transaction]) => ({\n        hash,\n        content: transaction,\n      }));\n  }\n\n  isOutgoing(multiparty: Multiparty): boolean {\n    return multiparty.spender_pub_key === this.myAgentPubKey;\n  }\n\n  offer(offerHash: string): Offer {\n    return this.offers[offerHash];\n  }\n\n  counterpartyKey(multiparty: Multiparty): string {\n    return multiparty.recipient_pub_key === this.myAgentPubKey\n      ? multiparty.spender_pub_key\n      : multiparty.recipient_pub_key;\n  }\n\n  counterpartyNickname(multiparty: Multiparty): string {\n    const counterpartyKey = this.counterpartyKey(multiparty);\n\n    return this.profilesStore.profileOf(counterpartyKey).nickname;\n  }\n\n  @computed\n  get outgoingOffers(): Array<HoloHashed<Offer>> {\n    return this.myPendingOffers.filter(offer => this.isOutgoing(offer.content));\n  }\n\n  @computed\n  get incomingOffers(): Array<HoloHashed<Offer>> {\n    return this.myPendingOffers.filter(\n      offer => !this.isOutgoing(offer.content)\n    );\n  }\n\n  @computed\n  get myBalance(): number {\n    return Object.values(this.transactions).reduce(\n      (acc, next) => acc + (this.isOutgoing(next) ? -next.amount : next.amount),\n      0\n    );\n  }\n\n  @action\n  public async fetchMyPendingOffers() {\n    const offers = await this.transactorService.queryMyPendingOffers();\n\n    const promises = offers.map(o =>\n      this.profilesStore.fetchAgentProfile(this.counterpartyKey(o.content))\n    );\n    await Promise.all(promises);\n\n    offers.forEach(o => this.storeOffer(o));\n  }\n\n  @action\n  public async fetchMyTransactions() {\n    const transactions = await this.transactorService.getAgentTransactions(\n      this.myAgentPubKey\n    );\n\n    const promises = transactions.map(t =>\n      this.profilesStore.fetchAgentProfile(this.counterpartyKey(t.content))\n    );\n    await Promise.all(promises);\n\n    transactions.forEach(t => this.storeTransaction(t));\n  }\n\n  @action\n  public async createOffer(\n    recipientPubKey: string,\n    amount: number\n  ): Promise<void> {\n    await this.transactorService.createOffer(recipientPubKey, amount);\n\n    this.fetchMyPendingOffers();\n  }\n\n  @action\n  public async acceptOffer(offerHash: string): Promise<void> {\n    await this.transactorService.acceptOffer(offerHash);\n\n    runInAction(() => {\n      this.fetchMyTransactions();\n    });\n  }\n\n  @action\n  public storeOffer(offer: HoloHashed<Offer>) {\n    this.offers[offer.hash] = offer.content;\n  }\n  @action\n  public storeTransaction(transaction: HoloHashed<Transaction>) {\n    this.transactions[transaction.hash] = transaction.content;\n  }\n}\n"]}